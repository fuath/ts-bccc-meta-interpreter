import { Unit, Sum } from "ts-bccc";
import { ExprRt, Interface, Val, HeapRef } from "./memory";
export declare let declare_class_rt: (C_name: string, int: Interface) => ExprRt<Val>;
export declare let field_get_rt: (F_name: string, this_addr: HeapRef) => ExprRt<Val>;
export declare let field_get_expr_rt: (F_name: string, this_expr: ExprRt<Val>) => ExprRt<Val>;
export declare let field_set_rt: (F_name: string, new_val_expr: ExprRt<Val>, this_addr: HeapRef) => ExprRt<Val>;
export declare let field_set_expr_rt: (F_name: string, new_val_expr: ExprRt<Val>, this_expr: ExprRt<Val>) => ExprRt<Val>;
export declare let resolve_method_rt: (M_name: string, C_def: Interface) => Sum<ExprRt<Val>, Unit>;
export declare let call_method_rt: (M_name: string, this_addr: Val, args: ExprRt<Val>[]) => ExprRt<Val>;
export declare let call_method_expr_rt: (M_name: string, this_expr: ExprRt<Val>, args: ExprRt<Val>[]) => ExprRt<Val>;
export declare let call_cons_rt: (C_name: string, args: ExprRt<Val>[]) => ExprRt<Val>;
