import { Unit, Fun, Sum } from "ts-bccc";
import { Coroutine } from "ts-bccc";
import { ExprRt, MemRt, Val, Lambda, Bool, ArrayVal, Scope } from "./memory";
import { SourceRange } from "../source_range";
import { RenderGrid, RenderGridPixel } from "./python";
export interface BoolCat extends Fun<Unit, Sum<Unit, Unit>> {
}
export declare let FalseCat: BoolCat;
export declare let TrueCat: BoolCat;
export declare let bool_to_boolcat: Fun<Bool, BoolCat>;
export declare let unit_expr: () => Coroutine<MemRt, string, Val>;
export declare let str_expr: (s: string) => Coroutine<MemRt, string, Val>;
export declare let float_expr: (n: number) => Coroutine<MemRt, string, Val>;
export declare let int_expr: (n: number) => Coroutine<MemRt, string, Val>;
export declare let arr_expr: (a: ArrayVal) => Coroutine<MemRt, string, Val>;
export declare let bool_expr: (s: boolean) => Coroutine<MemRt, string, Val>;
export declare let lambda_expr: (l: Lambda) => Coroutine<MemRt, string, Val>;
export declare let obj_expr: (o: Scope) => Coroutine<MemRt, string, Val>;
export declare let ref_expr: (r: string) => Coroutine<MemRt, string, Val>;
export declare let val_expr: (v: Val) => Coroutine<MemRt, string, Val>;
export declare let render_grid_expr: (v: RenderGrid) => Coroutine<MemRt, string, Val>;
export declare let render_grid_pixel_expr: (v: RenderGridPixel) => Coroutine<MemRt, string, Val>;
export declare let mk_empty_render_grid_rt: (width: ExprRt<Val>, height: ExprRt<Val>) => ExprRt<Val>;
export declare let mk_render_grid_pixel_rt: (x: ExprRt<Val>, y: ExprRt<Val>, status: ExprRt<Val>) => ExprRt<Val>;
export declare let render_grid_plus_rt: (r: ExprRt<Val>, p: ExprRt<Val>) => ExprRt<Val>;
export declare let bool_times_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let bool_plus_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let int_plus_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let int_minus_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let int_times_rt: (a: ExprRt<Val>, b: ExprRt<Val>, sr: SourceRange) => ExprRt<Val>;
export declare let int_div_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let int_mod_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let int_gt_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let int_lt_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let int_geq_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let int_leq_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let int_eq_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let int_neq_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let bool_neq_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let float_plus_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let float_minus_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let float_times_rt: (a: ExprRt<Val>, b: ExprRt<Val>, sr: SourceRange) => ExprRt<Val>;
export declare let float_div_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let float_gt_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let float_lt_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let float_geq_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let float_leq_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let float_eq_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let float_neq_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let string_plus_rt: (a: ExprRt<Val>, b: ExprRt<Val>) => ExprRt<Val>;
export declare let bool_not_rt: (a: ExprRt<Val>) => ExprRt<Val>;
export declare let int_minus_unary_rt: (a: ExprRt<Val>) => ExprRt<Val>;
export declare let float_minus_unary_rt: (a: ExprRt<Val>) => ExprRt<Val>;
export declare let string_length_rt: (a: ExprRt<Val>) => ExprRt<Val>;
