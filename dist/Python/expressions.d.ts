import { Unit, Fun, Sum } from "ts-bccc";
import { Coroutine } from "ts-bccc";
import { ExprRt, MemRt, Val, Lambda, Bool, ArrayVal, Scope, RenderSurface } from "./memory";
import { SourceRange } from "../source_range";
import { RenderSurfaceOperation } from "./python";
export interface BoolCat extends Fun<Unit, Sum<Unit, Unit>> {
}
export declare let FalseCat: BoolCat;
export declare let TrueCat: BoolCat;
export declare let bool_to_boolcat: Fun<Bool, BoolCat>;
export declare let unit_expr: () => Coroutine<MemRt, string, Sum<Val, Val>>;
export declare let str_expr: (s: string) => Coroutine<MemRt, string, Sum<Val, Val>>;
export declare let float_expr: (n: number) => Coroutine<MemRt, string, Sum<Val, Val>>;
export declare let int_expr: (n: number) => Coroutine<MemRt, string, Sum<Val, Val>>;
export declare let arr_expr: (a: ArrayVal) => Coroutine<MemRt, string, Sum<Val, Val>>;
export declare let tuple_expr: (a: Val[]) => Coroutine<MemRt, string, Sum<Val, Val>>;
export declare let bool_expr: (s: boolean) => Coroutine<MemRt, string, Sum<Val, Val>>;
export declare let lambda_expr: (l: Lambda) => Coroutine<MemRt, string, Sum<Val, Val>>;
export declare let obj_expr: (o: Scope) => Coroutine<MemRt, string, Sum<Val, Val>>;
export declare let ref_expr: (r: string) => Coroutine<MemRt, string, Sum<Val, Val>>;
export declare let val_expr: (v: Sum<Val, Val>) => Coroutine<MemRt, string, Sum<Val, Val>>;
export declare let render_surface_expr: (v: RenderSurface) => Coroutine<MemRt, string, Sum<Val, Val>>;
export declare let render_surface_operation_expr: (v: RenderSurfaceOperation) => Coroutine<MemRt, string, Sum<Val, Val>>;
export declare let tuple_expr_rt: (args: ExprRt<Sum<Val, Val>>[]) => ExprRt<Sum<Val, Val>>;
export declare let tuple_get_rt: (r: SourceRange, t: ExprRt<Sum<Val, Val>>, item_index: number) => ExprRt<Sum<Val, Val>>;
export declare let record_get_rt: (r: SourceRange, t: ExprRt<Sum<Val, Val>>, F_name: string) => ExprRt<Sum<Val, Val>>;
export declare let render_surface_plus_rt: (r: ExprRt<Sum<Val, Val>>, p: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let mk_empty_render_surface_rt: (width: ExprRt<Sum<Val, Val>>, height: ExprRt<Sum<Val, Val>>, color: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let mk_circle_rt: (x: ExprRt<Sum<Val, Val>>, y: ExprRt<Sum<Val, Val>>, r: ExprRt<Sum<Val, Val>>, color: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let mk_square_rt: (x: ExprRt<Sum<Val, Val>>, y: ExprRt<Sum<Val, Val>>, s: ExprRt<Sum<Val, Val>>, color: ExprRt<Sum<Val, Val>>, rot: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let mk_rectangle_rt: (x: ExprRt<Sum<Val, Val>>, y: ExprRt<Sum<Val, Val>>, w: ExprRt<Sum<Val, Val>>, h: ExprRt<Sum<Val, Val>>, color: ExprRt<Sum<Val, Val>>, rot: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let mk_line_rt: (x1: ExprRt<Sum<Val, Val>>, y1: ExprRt<Sum<Val, Val>>, x2: ExprRt<Sum<Val, Val>>, y2: ExprRt<Sum<Val, Val>>, w: ExprRt<Sum<Val, Val>>, color: ExprRt<Sum<Val, Val>>, rot: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let mk_polygon_rt: (points: ExprRt<Sum<Val, Val>>, col: ExprRt<Sum<Val, Val>>, rot: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let mk_text_rt: (text: ExprRt<Sum<Val, Val>>, x: ExprRt<Sum<Val, Val>>, y: ExprRt<Sum<Val, Val>>, s: ExprRt<Sum<Val, Val>>, color: ExprRt<Sum<Val, Val>>, rotation: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let mk_sprite_rt: (sprite: ExprRt<Sum<Val, Val>>, x: ExprRt<Sum<Val, Val>>, y: ExprRt<Sum<Val, Val>>, w: ExprRt<Sum<Val, Val>>, h: ExprRt<Sum<Val, Val>>, rot: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let mk_ellipse_rt: (x: ExprRt<Sum<Val, Val>>, y: ExprRt<Sum<Val, Val>>, w: ExprRt<Sum<Val, Val>>, h: ExprRt<Sum<Val, Val>>, color: ExprRt<Sum<Val, Val>>, rot: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let mk_other_surface_rt: (s: ExprRt<Sum<Val, Val>>, dx: ExprRt<Sum<Val, Val>>, dy: ExprRt<Sum<Val, Val>>, sx: ExprRt<Sum<Val, Val>>, sy: ExprRt<Sum<Val, Val>>, rot: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let bool_times_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let bool_plus_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let int_plus_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let int_minus_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let int_times_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>, sr: SourceRange) => ExprRt<Sum<Val, Val>>;
export declare let int_div_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let int_mod_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let int_gt_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let int_lt_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let int_geq_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let int_leq_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let int_eq_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let int_neq_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let bool_eq_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let bool_neq_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let string_eq_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let string_neq_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let float_plus_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let float_minus_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let float_times_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>, sr: SourceRange) => ExprRt<Sum<Val, Val>>;
export declare let float_div_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let float_gt_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let float_lt_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let float_geq_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let float_leq_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let float_eq_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let float_neq_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let string_plus_rt: (a: ExprRt<Sum<Val, Val>>, b: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let bool_not_rt: (a: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let int_minus_unary_rt: (a: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let float_minus_unary_rt: (a: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
export declare let string_length_rt: (a: ExprRt<Sum<Val, Val>>) => ExprRt<Sum<Val, Val>>;
