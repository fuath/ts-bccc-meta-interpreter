import { Unit, Fun, Sum } from "ts-bccc";
import { MemRt, ErrVal, Val, Lambda, Bool, ArrayVal, Scope, RenderSurface } from "./memory";
import { SourceRange } from "../source_range";
import { RenderSurfaceOperation } from "./python";
import { Coroutine } from "../fast_coroutine";
export interface BoolCat extends Fun<Unit, Sum<Unit, Unit>> {
}
export declare let FalseCat: BoolCat;
export declare let TrueCat: BoolCat;
export declare let bool_to_boolcat: Fun<Bool, BoolCat>;
export declare let unit_expr: () => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let str_expr: (s: string) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let float_expr: (n: number) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let int_expr: (n: number) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let arr_expr: (a: ArrayVal) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let tuple_expr: (a: Val[]) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let bool_expr: (s: boolean) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let lambda_expr: (l: Lambda) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let obj_expr: (o: Scope) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let ref_expr: (r: string) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let val_expr: (v: Sum<Val, Val>) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let render_surface_expr: (v: RenderSurface) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let render_surface_operation_expr: (v: RenderSurfaceOperation) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let tuple_expr_rt: (args: Coroutine<MemRt, ErrVal, Sum<Val, Val>>[]) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let tuple_get_rt: (r: SourceRange, t: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, item_index: number) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let record_get_rt: (r: SourceRange, t: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, F_name: string) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let render_surface_plus_rt: (sr: SourceRange, r: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, p: Coroutine<MemRt, ErrVal, Sum<Val, Val>>) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let mk_empty_render_surface_rt: (r: SourceRange, width: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, height: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, color: Coroutine<MemRt, ErrVal, Sum<Val, Val>>) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let mk_circle_rt: (sr: SourceRange, x: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, y: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, r: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, color: Coroutine<MemRt, ErrVal, Sum<Val, Val>>) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let mk_square_rt: (r: SourceRange, x: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, y: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, s: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, color: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, rot: Coroutine<MemRt, ErrVal, Sum<Val, Val>>) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let mk_rectangle_rt: (r: SourceRange, x: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, y: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, w: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, h: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, color: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, rot: Coroutine<MemRt, ErrVal, Sum<Val, Val>>) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let mk_line_rt: (r: SourceRange, x1: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, y1: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, x2: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, y2: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, w: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, color: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, rot: Coroutine<MemRt, ErrVal, Sum<Val, Val>>) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let mk_polygon_rt: (r: SourceRange, points: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, col: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, rot: Coroutine<MemRt, ErrVal, Sum<Val, Val>>) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let mk_text_rt: (r: SourceRange, text: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, x: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, y: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, s: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, color: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, rotation: Coroutine<MemRt, ErrVal, Sum<Val, Val>>) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let mk_sprite_rt: (r: SourceRange, sprite: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, x: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, y: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, w: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, h: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, rot: Coroutine<MemRt, ErrVal, Sum<Val, Val>>) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let mk_ellipse_rt: (r: SourceRange, x: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, y: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, w: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, h: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, color: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, rot: Coroutine<MemRt, ErrVal, Sum<Val, Val>>) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let mk_other_surface_rt: (r: SourceRange, s: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, dx: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, dy: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, sx: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, sy: Coroutine<MemRt, ErrVal, Sum<Val, Val>>, rot: Coroutine<MemRt, ErrVal, Sum<Val, Val>>) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let int_minus_unary_rt: (r: SourceRange, a: Coroutine<MemRt, ErrVal, Sum<Val, Val>>) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let float_minus_unary_rt: (r: SourceRange, a: Coroutine<MemRt, ErrVal, Sum<Val, Val>>) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
export declare let string_length_rt: (r: SourceRange, a: Coroutine<MemRt, ErrVal, Sum<Val, Val>>) => Coroutine<MemRt, ErrVal, Sum<Val, Val>>;
