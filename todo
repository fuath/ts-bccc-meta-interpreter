[g] unit tests
  [ ] rendering
  [ ] files
  [ ] inheritance
  [ ] generics
  [ ] exceptions
  [ ] fancy features (yield return, LINQ)
  [ ] html rendering
[g] Improve type-checking error messages: "cannot ..., expected ..., found ..."
[g] Filesystem simulator
[g] HTML renderers for server simulator

[g] explicit casting
  [ ] parser
  [ ] typechecker
  [ ] runtime?
[g] automatically cast int+float -> float, double+int -> double, etc.
  [ ] t1,t2 -> (cast1:Expr->Expr, cast2:Expr->Expr, res_t:Type)
  [ ] toString operators
  [ ] tuples vs records (see array case, requires generics)
  [g] standard library
    [ ] int
    [ ] float
    [ ] double
    [ ] string
    [ ] renderers (and their (+) operation)
    [ ] hidden in GO
[g] operator overloading in regular classes
  [ ] ensure right ariety: +, -, ... have ariety 2, -,! can have ariety 1

[g] Inheritance
  [ ] Extends
  [ ] Interface
  [ ] abstract
  [ ] protected
  [ ] virtual
  [ ] override
  [ ] polymorphism (<= instead of == while typechecking)
  [ ] Covariance/contravariance in function calls and variable assignments

[g] Closures in regular functions

[g] Access modifiers: incompatibility errors do not bubble up correctly
[g] tokenizer error = { priority:number, message:string, range:SourceRange } (also in debugger stream)
[g] run-time error = { priority:number, message:string, range:SourceRange } (also in debugger stream)
[g] Restructure project
  [ ] Bindings.ts becomes a whole directory of files
  [ ] Grammar.ts becomes a whole directory of files
  [ ] `Python` semantics should be properly called `C#` semantics

[g] Databases

[g] destructuring assignment of records and tuples
[g] Move ccc_aux to CCC repo
[g] Structs
[g] Generics
[g] Use mutable state, then clone it to the immutable memory upon `dbg`
[g] Data-oriented memory: ints, floats, strings, ..., each an array for faster lookup
[g] Invoke statically typed semantics
[g] renderers defined in standard library


[m] add C# to playground and exam
[m] "il programma Ã¨ finito, ma il debugger resta bloccato sull'ultimo breakpoint"
[m] Getters vs function application (test example below):
  (string,string,(string,Func<int,Func<int,int>>)) v = ("Hello", "world", ("!",(x => y => x * y)));
  var h = v.Item3.Item2(3);
  var y = h(2);
[m] ++ operator
  [ ] i++
  [ ] ++i
[m] procedures (functions returning `void`)
[m] draw functions returning `void` as `Action`
[m] `Func<void,*>` should draw as `Func<*>`
[m] test `s = s + polygon (new (int,int)[] { (1,1), (2,2) (3,3) }) "red" 0;` when arrays are done
[m] multidimensional array + array in class attributes

[m] Use code font in debugger tables
[m] test: pass lambda to method, constructor, assign to field, set into array (`constraints` parameter must be set)
[m] use something visual instead of debugger and typechecker_debugger
[m] errors with source range over code in editor
  [ ] Print properly (no `JSON.stringify`)
[m] function parameters should have a range
[m] comments
[m] highlighting with proper style
[m] properties
[m] add multiple highlightings (along the stack) for function calls
[m] parsing, typecheking, etc. of `null` (also for strings)

[m] Syntax highlighting
[m] double check tokens
  [ ] underscores
  [ ] number separators
  [ ] quotes, special characters, "\n"

[m] yield return
[m] ForEach

[m] LINQ
[m] C# 7 pattern matching
[m] async/await
[m] Extension methods
[ ] (System.Diagnostics.GC) Garbage collection (and `heap_alloc` fills in the gaps)
[m] Old-style tuples (System.Tuple<T1, T2, ...>)

[m] string interpolation

[m] Exceptions
  [ ] Inheritance of exceptions
  [ ] Nested exception handlers
  [ ] Multiple `catch` statements
  [ ] `finally`

[m] Standard library
  [ ] Collections
  [ ] strings
  [ ] files

[m] `using` statement and `IDisposable`
[m] Exam mode in desktop application


[ ] Cleanup/whishlist
  [ ] `while` with fixpoint
  [ ] `resolve_method` with fixpoint
  [ ] Whole semantics must be fully categorical: no apply, almost everything becomes Fun<a,b>
  [ ] Memory values as sums (of basic types)
  [ ] breakpoint right after return (`ret_break?`)
  [ ] Intellisense editor
  [ ] Integration in VSCode


[m]
  public Vector2 Times(double c){
    return new Vector2(this.x * c, this.y * c);
  }
  public Vector2 Div(double c){
    return this.Times(1.0 / c);
  }