[ ] C#
  [g] Tuples
    [ ] As func argument
  [g] Records (C# 7 tuples)
  [g] `For` loops
  [g] Access modifiers: incompatibility errors do not bubble up correctly
  [g] tokenizer error = { priority:number, message:string, range:SourceRange } (also in debugger stream)
  [g] run-time error = { priority:number, message:string, range:SourceRange } (also in debugger stream)
  [g] Generics
  [g] Structs
  [g] Split into multiple files
    [ ] Bindings.ts becomes a whole directory of files
    [ ] Grammar.ts becomes a whole directory of files
  [g] `Python` semantics should be properly called `C#` semantics

  [m] Complete cases of `free_variables` (see grammar.ts)
  [m] Right-associativity of => (x => y => x + y)
  [m] Parsing of curried application (f(5)(10))
  [m] Closures in regular functions
  [m] arrays
  [m] Inheritance
    [ ] Extends
    [ ] Interface
    [ ] abstract
    [ ] protected
    [ ] virtual
    [ ] override
    [ ] Covariance/contravariance in function calls and variable assignments
  [m] properties
  [m] function parameters should have a range
  [m] initial values of the proper type for variables at declaration when no value is specified
  [m] a variable with the same name can be declared twice: this should not be allowed!
  [m] new B(new A(10)) does not work
  [m] constructor with wrong name is accepted: `class A { public B() { ... } }`
  [m] methods/functions without body
  [m] comments
  [m] Syntax highlighting
  [m] add multiple highlightings for function calls
  [m] double check tokens: disallowed variable names, underscores, number separators
  [m] yield return
  [m] ForEach

  [m] LINQ
  [m] C# 7 pattern matching
  [m] async/await
  [m] Extension methods
  [ ] (System.Diagnostics.GC) Garbage collection (and `heap_alloc` fills in the gaps)
  [m] Renderers
    [ ] Surface
    [ ] Circle (with color)
    [ ] Square (with color)
    [ ] Spline (with color)
    [ ] Spaceship (with color)
    [ ] Asteroid (with color)
    [ ] Laser (with color)
  [ ] Old-style tuples (System.Tuple<T1, T2, ...>)

[ ] Performance optimisations
  [g] Use mutable state, then clone it to the immutable memory upon `dbg`
  [g] Data-oriented memory: ints, floats, strings, ..., each an array for faster lookup
  [g] Invoke statically typed semantics
[ ] Cleanup/whishlist
  [ ] Move ccc_aux to CCC repo
  [ ] `while` with fixpoint
  [ ] `resolve_method` with fixpoint
  [ ] Whole semantics must be fully categorical: no apply, almost everything becomes Fun<a,b>
  [ ] Memory values as sums (of basic types)
  [ ] breakpoint right after return (`ret_break?`)

