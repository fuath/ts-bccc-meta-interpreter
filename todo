[ ] IMP interruptible semantics
  [x] errors
    [x] check that the number of arguments passed to a lambda is correct
    [x] from a to (a + unit) to account for not-found elements
      [x] load
      [x] load_class_def
      [x] load_fun_def
      [x] load_heap
      [x] pop_scope


[ ] IMP TYPE CHECKER
[ ] IMP PARSER
  [ ] distributive laws applied to monadic combinators such as parallel/concurrent
  [ ] Python
  [ ] C#

[ ] Performance optimisations
  [ ] Use mutable state, then clone it to the immutable memory upon `dbg`
  [ ] data-oriented memory: ints, floats, strings, ..., each an array for faster lookup
[ ] Cleanup/whishlist
  [ ] `while` with fixpoint
  [ ] `resolve_method` with fixpoint
  [ ] Whole semantics must be fully categorical: no apply, almost everything becomes Fun<a,b>
  [ ] Garbage collection (and `heap_alloc` fills in the gaps)
  [ ] Memory values as sums (of basic types)
