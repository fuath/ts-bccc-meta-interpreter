[ ] C#
  [ ] Classes
    [ ] Generics
    [ ] Polymorphism
      [ ] Inheritance
      [ ] Covariance/contravariance in function calls and variable assignments
    [ ] Access modifiers
      [ ] public
      [ ] private
      [ ] static
      [ ] protected
      [ ] virtual
      [ ] override
    [ ] Structs
    [ ] Tuples
    [ ] Records (C# 7 tuples)
    [ ] Static methods
      [ ] Definition
      [ ] Call
    [ ] Extension methods
  [ ] Functions
    [ ] Lambda's (requires Func and generics in type-checker)
    [ ] Closure
  [ ] Statements
    [ ] arrays
      [ ] lookup
      [ ] assignment
    [ ] For
    [ ] ForEach
    [ ] LINQ
    [ ] yield return
    [ ] async/await
    [ ] C# 7 pattern matching
    [ ] `var`

[ ] Issues/quality assurance
  [ ] comments
  [ ] new B(new A(10)) does not work
  [ ] constructor with wrong name is accepted: `class A { public B() { ... } }`
  [ ] methods/functions without body
  [ ] initial values of the proper type for variables at declaration when no value is specified
  [ ] errors
    [ ] are lambda arguments properly checked at both run-time and compile-time?
    [ ] type-checker error = { priority:number, message:string, range:SourceRange }
  [ ] Split into multiple files
    [ ] Bindings.ts becomes a whole directory of files
    [ ] Grammar.ts becomes a whole directory of files
  [ ] Syntax highlighting

[ ] Highlighting
  [ ] Use both start and end
  [ ] Add highlighting to current stack frame/a stack of highlighting values, not a single global value

[ ] Type checker
  [ ] Var
  [ ] For
  [ ] Generics
  [ ] Tuples
  [ ] Records (C# 7 tuples)
  [ ] Func
  [ ] Inheritance
    [ ] Extends
    [ ] Interface
    [ ] abstract
    [ ] protected
    [ ] virtual
    [ ] override
  [ ] Covariance/contravariance in function calls and variable assignments
  [ ] Access modifiers: incompatibility errors do not bubble up correctly
  [ ] ForEach
  [ ] C# 7 pattern matching
  [ ] LINQ
  [ ] yield return
  [ ] async/await
  [ ] Structs
  [ ] `var`

[ ] Performance optimisations
  [ ] Use mutable state, then clone it to the immutable memory upon `dbg`
  [ ] Data-oriented memory: ints, floats, strings, ..., each an array for faster lookup
  [ ] Invoke statically typed semantics
[ ] Cleanup/whishlist
  [ ] Move ccc_aux to CCC repo
  [ ] parser: operator handling is very repetitive
  [ ] `while` with fixpoint
  [ ] `resolve_method` with fixpoint
  [ ] Whole semantics must be fully categorical: no apply, almost everything becomes Fun<a,b>
  [ ] Garbage collection (and `heap_alloc` fills in the gaps)
  [ ] Memory values as sums (of basic types)
  [ ] breakpoint right after return (`ret_break?`)
