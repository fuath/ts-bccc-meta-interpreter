[ ] Move ccc_aux to CCC repo

[ ] IMP TYPE CHECKER
  [ ] File management
    [ ] Split into multiple files
  [ ] Classes
    [ ] Generics
    [ ] Polymorphism
      [ ] Inheritance
      [ ] Covariance/contravariance in function calls and variable assignments
    [ ] Structs
    [ ] Tuples
    [ ] Static methods
    [ ] Extension methods
    [ ] LINQ
[ ] IMP PARSER
  [ ] Statements
    [ ] Debugger
    [ ] Typechecker debugger
    [/] Declaration
    [/] Assignment
      [ ] Left-hand
        [/] To variable
        [ ] To set field
      [ ] Right-hand
        [ ] Field get
        [/] Constant
        [/] Variable
        [ ] Basic (non-recursive) arithmetic expressions
          [/] +
          [ ] -
          [ ] /
          [/] *
        [ ] Constructor
        [ ] Method call
  [ ] Functions
    [ ] Def
    [ ] Call
  [ ] Classes
    [ ] Def
    [ ] Method call
  [ ] Fundamental, but not needed for basic implementation
    [ ] Ignore whitespace everywhere (in grammar instead of as post-processing of lexer)
    [ ] Proper (recursive) field lookups
    [ ] Proper (recursive) expressions
    [ ] Error messages and error management!
      [ ] Last parsed statement vs last non-parsed statement
  [ ] Electron playground


[ ] Required for basic quality but not basic functionality
  [ ] localized errors everywhere (curried parameter, used for runtime/compiler errors!)
    [ ] lambda arguments in lambda type-checking errors
  [ ] breakpoint right after return (`ret_break?`)

[ ] Performance optimisations
  [ ] Use mutable state, then clone it to the immutable memory upon `dbg`
  [ ] Data-oriented memory: ints, floats, strings, ..., each an array for faster lookup
  [ ] Invoke statically typed semantics
[ ] Cleanup/whishlist
  [ ] `while` with fixpoint
  [ ] `resolve_method` with fixpoint
  [ ] Whole semantics must be fully categorical: no apply, almost everything becomes Fun<a,b>
  [ ] Garbage collection (and `heap_alloc` fills in the gaps)
  [ ] Memory values as sums (of basic types)
