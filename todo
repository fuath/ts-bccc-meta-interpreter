[ ] Create GrandeOmegaShared private repository
[ ] C#
  [ ] File management
    [ ] Split into multiple files
      [ ] Bindings.ts becomes a whole directory of files
      [ ] Grammar.ts becomes a whole directory of files
  [ ] Classes
    [ ] Generics
    [ ] Polymorphism
      [ ] Inheritance
      [ ] Covariance/contravariance in function calls and variable assignments
    [ ] Structs
    [ ] Tuples
    [ ] Records
    [ ] Static methods
      [ ] Definition
      [ ] Call
    [ ] Extension methods
  [ ] Functions
    [ ] Lambda's (requires Func and generics in type-checker)
    [ ] Closure
  [ ] Statements
    [ ] For
    [ ] ForEach
    [ ] LINQ
    [ ] yield return
    [ ] async/await
    [ ] pattern matching
  [ ] Important improvements
    [ ] Proper (recursive) field lookups
    [ ] methods/functions without body
    [ ] (proper) initial values for variables at declaration when no value is specified
    [ ] localized errors everywhere (curried parameter, used for runtime/compiler errors!)
      [ ] Are lambda arguments properly checked at both run-time and compile-time
      [ ] Propagate nested parse errors (for example, the errors inside the body of a while or inside the body of a function)

[ ] Highlighting
  [ ] Use both start and end
  [ ] Add highlighting to current stack frame/a stack of highlighting values, not a single global value

[ ] Required for basic quality but not basic functionality
  [ ] breakpoint right after return (`ret_break?`)

[ ] Performance optimisations
  [ ] Use mutable state, then clone it to the immutable memory upon `dbg`
  [ ] Data-oriented memory: ints, floats, strings, ..., each an array for faster lookup
  [ ] Invoke statically typed semantics
[ ] Cleanup/whishlist
  [ ] Move ccc_aux to CCC repo
  [ ] parser: operator handling is very repetitive
  [ ] `while` with fixpoint
  [ ] `resolve_method` with fixpoint
  [ ] Whole semantics must be fully categorical: no apply, almost everything becomes Fun<a,b>
  [ ] Garbage collection (and `heap_alloc` fills in the gaps)
  [ ] Memory values as sums (of basic types)
