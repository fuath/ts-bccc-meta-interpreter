[g] Access modifiers: incompatibility errors do not bubble up correctly

[g] operator overloading in regular classes (classes have a list of methods per name, not just one entry)
  [ ] method overloading
  [ ] binary operator overloading
  [ ] unary operator overloading
  [ ] add unary - to standard library

[g] remove old-style method resolution from semantics

[g] Filesystem simulator
[g] Inheritance
  [ ] Object with `ToString() { return "" }`
[g] Generics
  [ ] Add generic classes as T => { ... }
    [ ] Cache instances as invisible defs
  [ ] Array<T> in standard library
  [ ] Tuple in standard library
[g] closure of functions: free_variables vs decl/decl_and_init (`bound` should become the state)

[g] Databases
[g] HTML renderers for server simulator
[g] Structs

[g] unit tests
  [ ] failed coercions and wrong types
    [ ] primitives and operations
    [ ] field getter and setter
    [ ] in both functions and methods
      [ ] return types
      [ ] arguments
      [ ] anonymous functions
      [ ] arrays
      [ ] anonymous functions given to wrong contexts
  [ ] rendering
  [ ] files
  [ ] inheritance
  [ ] generics
  [ ] exceptions
  [ ] fancy features (yield return, LINQ)
  [ ] html rendering

[g] Restructure project
  [ ] Bindings.ts becomes a whole directory of files
  [ ] `Python` semantics should be properly called `C#` semantics

[g] Move ccc_aux to CCC repo
[g] Use mutable state, then clone it to the immutable memory upon `dbg`
[g] Data-oriented memory: ints, floats, strings, ..., each an array for faster lookup
[g] destructuring assignment of records and tuples
[g] Invoke statically typed semantics
[g] renderers defined in standard library, with (+) operator
[g] String::Length in standard library

[m] inheritance
  [X] base in class fields (both in actual and temp)
  [X] before constructor body call base(args)
  [X] field_get and field_set lookup recursively in base
    [X] looking up in the methods is done if all recursive base lookups have failed
  [X] method lookup looks recursively in the inherited C_def.base
  [X] virtual and abstract methods are lambda fields which are already applied to this in the constructor before body
    [X] abstract M : this => A => R ~~> field M : Func<A,R>
  [X] override == field_set of method field
  [ ] editor + debugger in GO
  [ ] abstract methods are initialized to null in the constructor
  [ ] interfaces are abstract classes with only abstract methods
  [X] abstract classes are not instantiatable (only internally)
  [ ] private vs protected
  [ ] abstract propagation
  [ ] C# 7 pattern matching via `actual_class` in (all?) base instances
  [ ] Include inheritance/polym. examples in test
[m] improve unit/void/[] params in lambdas or functions
[m] parse/typecheck errors from dev3 exam (see cesco@Slack)

[m] add `null`
[m] add C# to playground
[m] "il programma Ã¨ finito, ma il debugger resta bloccato sull'ultimo breakpoint"
[m] Getters vs function application (test example below):
  (string,string,(string,Func<int,Func<int,int>>)) v = ("Hello", "world", ("!",(x => y => x * y)));
  var h = v.Item3.Item2(3);
  var y = h(2);
[m] ++ operator
  [ ] i++
  [ ] ++i
[m] procedures (functions returning `void`)
[m] draw functions returning `void` as `Action`
[m] `Func<void,*>` should draw as `Func<*>`
[m] multidimensional array

[m] Use code font in debugger tables

[m] use something visual instead of debugger and typechecker_debugger
[m] errors with source range over code in editor
  [ ] Print properly (no `JSON.stringify`)
[m] comments
[m] highlighting with proper style
[m] properties
[m] add multiple highlightings (along the stack) for function calls
[m] parsing, typecheking, etc. of `null` (also for strings)

[m] Syntax highlighting
[m] double check tokens
  [ ] underscores
  [ ] number separators
  [ ] quotes, special characters, "\n"

[m] yield return
[m] ForEach

[m] LINQ
[m] async/await
[m] Extension methods
[ ] (System.Diagnostics.GC) Garbage collection (and `heap_alloc` fills in the gaps)
[m] Old-style tuples (System.Tuple<T1, T2, ...>)

[m] string interpolation

[m] Exceptions
  [ ] Inheritance of exceptions
  [ ] Nested exception handlers
  [ ] Multiple `catch` statements
  [ ] `finally`

[m] Standard library
  [ ] Collections
  [ ] strings
  [ ] files

[m] `using` statement and `IDisposable`
[m] Exam mode in desktop application

[m] Python syntax
[m] var a = 1 + + 1; does not print a proper error




[ ] Cleanup/whishlist
  [ ] `while` with fixpoint
  [ ] Whole semantics must be fully categorical: no apply, almost everything becomes Fun<a,b>
  [ ] Memory values as sums (of basic types)
  [ ] breakpoint right after return (`ret_break?`)
  [ ] Intellisense editor
  [ ] Integration in VSCode
