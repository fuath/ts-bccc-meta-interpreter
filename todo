[g] Access modifiers: incompatibility errors do not bubble up correctly

[g] operator overloading in regular classes (classes have a list of methods per name, not just one entry)
  [ ] binary operator overloading
  [ ] unary operator overloading
  [ ] add unary - to standard library

[g] Generics
  [ ] Add generic classes as T => { ... }
    [ ] Cache instances as invisible defs
  [ ] Array<T> in standard library
  [ ] Tuple in standard library
[g] closure of functions: free_variables vs decl/decl_and_init (`bound` should become the state)

[g] HTML renderers for server simulator

[g] Filesystem simulator
  [ ] rendering

[g] unit tests
  [ ] failed coercions and wrong types
    [ ] primitives and operations
    [ ] field getter and setter
    [ ] in both functions and methods
      [ ] return types
      [ ] arguments
      [ ] anonymous functions
      [ ] arrays
      [ ] anonymous functions given to wrong contexts
  [ ] rendering
  [ ] files
  [ ] inheritance
  [ ] generics
  [ ] exceptions
  [ ] fancy features (yield return, LINQ)
  [ ] html rendering

[g] Restructure project
  [ ] Bindings.ts becomes a whole directory of files
  [ ] `Python` semantics should be properly called `C#` semantics

[g] Move ccc_aux to CCC repo


[m] save code also on wrong attempt (BA)
[m] inheritance
  [ ] abstract classes are not instantiatable (only internally), same goes for the abstract methods not initialized
[m] "il programma Ã¨ finito, ma il debugger resta bloccato sull'ultimo breakpoint"


[m] inheritance
  [ ] private vs protected
[m] parse/typecheck errors from dev3 exam (see cesco@Slack)
[m] add `null`
[m] ++ operator
  [ ] i++
  [ ] ++i
[m] Getters vs function application (test example below):
  (string,string,(string,Func<int,Func<int,int>>)) v = ("Hello", "world", ("!",(x => y => x * y)));
  var h = v.Item3.Item2(3);
  var y = h(2);
[m] add multiple highlightings (along the stack) for function calls
[m] double check tokens
  [ ] quotes, special characters, "\n"
[m] multithreading: thread_debugger;
[m] (System.Diagnostics.GC) Garbage collection (and `heap_alloc` fills in the gaps)
[m] Exam mode in desktop application
  [ ] login
[m] var a = 1 + + 1; does not print a proper error


[ ] Cleanup/whishlist
  [ ] Integration in VSCode
