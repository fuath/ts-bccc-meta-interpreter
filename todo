[g] multiparameter lambda's (`Func<int,string,string>`)
[g] toString operators and automated casting
[g] Access modifiers: incompatibility errors do not bubble up correctly
[g] tokenizer error = { priority:number, message:string, range:SourceRange } (also in debugger stream)
[g] run-time error = { priority:number, message:string, range:SourceRange } (also in debugger stream)
[g] Records (C# 7 tuples)

[g] Renderers
  [ ] Surface
  [ ] Circle (with color)
  [ ] Square (with color)
  [ ] Ellipse
  [ ] Rectangle
  [ ] Spline (with color)
  [ ] Polygon (with color)
  [ ] Spaceship (with color)
  [ ] Asteroid (with color)
  [ ] Laser (with color)

[g] HTML renderers for server simulator

[g] Files
[g] Databases

[g] destructuring assignment of records and tuples
[g] Restructure project
  [ ] Bindings.ts becomes a whole directory of files
  [ ] Grammar.ts becomes a whole directory of files
  [ ] `Python` semantics should be properly called `C#` semantics
[g] Move ccc_aux to CCC repo
[g] Structs
[g] Generics
[g] Use mutable state, then clone it to the immutable memory upon `dbg`
[g] Data-oriented memory: ints, floats, strings, ..., each an array for faster lookup
[g] Invoke statically typed semantics

[m] use something visual instead of debugger and typechecker_debugger
[m] editor does not save code properly, breaks the mode, and prevents saving the rest of the reader
[m] errors with range over code in editor
  [ ] Print properly (no `JSON.stringify`)
[m] Right-associativity of => (x => y => x + y)
[m] Parsing of curried application (f(5)(10))
[m] Getters vs function application (test example below):
  (string,string,(string,Func<int,Func<int,int>>)) v = ("Hello", "world", ("!",(x => (y => x * y))));
  var h = v.Item3.Item2(3);
  var y = h(2);
[m] ++ operator
  [ ] i++
  [ ] ++i
[m] function parameters should have a range
[m] constructor with wrong name is accepted: `class A { public B() { ... } }`
[m] negative numbers are not parsed
[m] float numbers do not work
[m] methods/functions without body
[m] comments
[m] highlighting with proper style
[m] procedures (functions returning `void`)
[m] `int z = then(d, p2)(5);` does not work (function call should be integrated into expression parser)
[m] show function body upon click/on mouse over

[m] does not parse:
int factorial(int x) {
  if (x <= 0) {
    return 1;
  } else {
    return x * factorial(x-1);
  }
}

[m] arrays
[m] Closures in regular functions
[m] properties
[m] initial values of the proper type for variables at declaration when no value is specified
[m] a variable with the same name can be declared twice: this should not be allowed!
[m] new B(new A(10)) does not work
[m] add multiple highlightings (along the stack) for function calls


[m] Syntax highlighting
[m] double check tokens
  [ ] disallowed variable names
  [ ] underscores
  [ ] number separators
  [ ] identifiers starting with keywords (`new_id` gets stuck in the token as `new`)
  [ ] quotes, special characters, "\n"

[m] Inheritance
  [ ] Extends
  [ ] Interface
  [ ] abstract
  [ ] protected
  [ ] virtual
  [ ] override
  [ ] Covariance/contravariance in function calls and variable assignments
[m] yield return
[m] ForEach
[m] allow specification of associativity of operators (left vs right)

[m] LINQ
[m] C# 7 pattern matching
[m] async/await
[m] Extension methods
[ ] (System.Diagnostics.GC) Garbage collection (and `heap_alloc` fills in the gaps)
[m] Old-style tuples (System.Tuple<T1, T2, ...>)

[m] string interpolation

[m] Standard library
  [ ] Collections
  [ ] strings
  [ ] files

[ ] Cleanup/whishlist
  [ ] `while` with fixpoint
  [ ] `resolve_method` with fixpoint
  [ ] Whole semantics must be fully categorical: no apply, almost everything becomes Fun<a,b>
  [ ] Memory values as sums (of basic types)
  [ ] breakpoint right after return (`ret_break?`)

